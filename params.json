{
  "name": "randomhost/weather",
  "tagline": "Encapsulates functions for easy retrieval of weather data from the Yahoo Weather API.",
  "body": "[![Build Status][0]][1]\r\n\r\nIntroduction\r\n============\r\n\r\nThis package encapsulates functions for easy retrieval of weather data from the\r\n[Yahoo Weather API][2]. It was created as part of `randomhost/webcamoverlay`\r\nbut is released as a separate component so it can be used in other packages.\r\n\r\nBecause it was created as a dependency of `randomhost/webcamoverlay`, it does\r\nonly support a subset of the available weather data.\r\n\r\nUsage\r\n-----\r\n\r\nA basic approach at using this package could look like this:\r\n\r\n```php\r\n<?php\r\nnamespace randomhost\\Weather;\r\n\r\nrequire_once '/path/to/vendor/autoload.php';\r\n\r\n// get Yahoo Weather API Feed instance\r\n$feed = new Yahoo\\Feed('Cologne', Yahoo\\Feed::UNITS_INTL);\r\n\r\necho sprintf(\r\n    'Temperature: %sÂ°%s, Humidity: %s%%',\r\n    $feed->getCondition()->getTemperature(),\r\n    $feed->getUnits()->getTemperature(),\r\n    $feed->getAtmosphere()->getHumidity()\r\n);\r\n```\r\n\r\nThis will instantiate the class, fetch the weather data and display current\r\ntemperature and humidity.\r\n\r\nAssuming that you named this file `weather.php`, you should now be able to\r\naccess the weather data at `http://example.com/weather.php`\r\n\r\nA more detailed example can be found in `src/www/weather.php`.\r\n\r\n### The Feed object\r\n\r\nThe `Feed` object is the primary object you will interact with in your application.\r\nIt provides all methods required for retrieving data from the Yahoo! Weather API.\r\n\r\n#### Constructor\r\n\r\nThe constructor takes 3 parameters which are all optional:\r\n\r\n- `$locationName`  \r\nLocation name for retrieving weather data from the Yahoo Weather API.\r\n\r\n- `$systemOfUnits`  \r\nSystem of units to be returned by the feed. This must be either `Feed::UNITS_INTL`\r\nor `Feed::UNITS_US`.\r\n\r\n- `$feedUrl`  \r\nFeed URL for retrieving weather data from Yahoo Weather API.\r\n\r\nIf a `$locationName` is given, `Feed::fetchData()` will be called implicitly\r\nwhich will automatically retrieve weather data for the given location ID and\r\npopulate the data access objects accordingly.  \r\nIf you do not want this, you can omit `$locationName` or set it to `''` (an empty\r\nstring) and configure the location name yourself using `Feed::setLocationName()`.\r\n\r\nThe `$systemOfUnits` parameter can be used to determine the system of units to\r\nbe used by the weather feed. If not given or set to `''` (an empty string), it\r\ndefaults to using international units (Celsius, kilometers, millibars).\r\n\r\n`$feedUrl` defines the feed URL for retrieving weather data from the Yahoo!\r\nWeather API. This parameter does not usually need to be changed unless Yahoo!\r\nchanges their API.\r\n\r\n#### Configuring the feed\r\n\r\nThe following public methods for configuring the weather feed are available:\r\n\r\n- `setFeedUrl($feedUrl)`  \r\nSets the feed URL for retrieving weather data from the Yahoo! Weather API.\r\n\r\n- `getFeedUrl()`  \r\nReturns the last set weather API feed URL.\r\n\r\n- `setLocationName($name)`  \r\nSets the location name for retrieving weather data from Yahoo Weather API.\r\n\r\n- `getLocationName()`  \r\nReturns the last set location name for retrieving weather data.\r\n\r\n- `setSystemOfUnits($systemOfUnits)`  \r\nSets the system of units to be returned by the feed.\r\n\r\n- `getSystemOfUnits()`  \r\nReturns the last set system of units.\r\n\r\n#### Retrieving data from the feed\r\n\r\nThe following public methods for retrieving data from the feed are available:\r\n\r\n- `fetchData()`  \r\nFetches weather data from the Yahoo Weather API and populates the data access\r\nobjects accordingly.  \r\nThis method must be called at least once before using any of the methods listed\r\nbelow.\r\n\r\n- `getLocation()`  \r\nReturns a `Data\\Location` object holding the location of this forecast.\r\n\r\n- `getUnits()`  \r\nReturns a `Data\\Units` object holding units for various aspects of the forecast.\r\n\r\n- `getWind()`  \r\nReturns a `Data\\Wind` object holding forecast information about wind.\r\n\r\n- `getAtmosphere()`  \r\nReturns a `Data\\Atmosphere` object holding forecast information about current\r\natmospheric pressure, humidity, and visibility.\r\n\r\n- `getAstronomy()`  \r\nReturns a `Data\\Astronomy` object holding forecast information about current\r\nastronomical conditions.\r\n\r\n- `getCondition()`  \r\nReturns a `Data\\Condition` object holding the current weather conditions.\r\n\r\n- `getForecast()`  \r\nReturns an array of `Data\\Forecast` objects holding the weather forecast for a\r\nspecific day.\r\n\r\n- `getTitle()`  \r\nReturns the title for the weather data as returned by Yahoo.\r\n\r\n- `getLink()`  \r\nReturns the link for linking weather data back to Yahoo.\r\n\r\n### The Data\\Location object\r\n\r\nThe `Data\\Location` object represents location information of the forecast.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getCity()`  \r\nReturns the city name. (string)\r\n\r\n- `getRegion()`  \r\nReturns the state, territory, or region. (string)\r\n\r\n- `getCountry()`  \r\nReturns the country name. (string)\r\n\r\n### The Data\\Units object\r\n\r\nThe `Data\\Units` object represents units for various aspects of the forecast.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getTemperature()`  \r\nReturns the degree units for temperature. (string)\r\n\r\n- `getDistance()`  \r\nReturns the units for distance. (string)\r\n\r\n- `getPressure()`  \r\nReturns the units of barometric pressure. (string)\r\n\r\n- `getSpeed()`  \r\nReturns the units of speed. (string)\r\n\r\n### The Data\\Wind object\r\n\r\nThe `Data\\Wind` object represents forecast information about wind.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getChill()`  \r\nReturns the wind chill in degrees. (float)\r\n\r\n- `getDirection()`  \r\nReturns the wind direction, in degrees. (float)\r\n\r\n- `getSpeed()`  \r\nReturns the wind speed. (float)\r\n\r\n### The Data\\Atmosphere object\r\n\r\nThe `Data\\Atmosphere` object represents forecast information about current\r\natmospheric pressure, humidity, and visibility.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getHumidity()`  \r\nReturns the humidity in percent. (float)\r\n\r\n- `getVisibility()`  \r\nReturns the visibility. (float)\r\n\r\n- `getPressure()`  \r\nReturns the barometric pressure. (float)\r\n\r\n- `getRising()`  \r\nReturns the state of the barometric pressure: steady (0), rising (1),\r\nor falling (2). (int)  \r\n\r\n### The Data\\Astronomy object\r\n\r\nThe `Data\\Astronomy` object represents forecast information about current\r\nastronomical conditions.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getSunrise()`  \r\nReturns today's sunrise time. (\\DateTime)\r\n\r\n- `getSunset()`  \r\nReturns today's sunset time. (\\DateTime)\r\n\r\n### The Data\\Condition object\r\n\r\nThe `Data\\Condition` object represents the current weather conditions.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getText()`  \r\nReturns the textual description of conditions. (string)\r\n\r\n- `getCode()`  \r\nReturns the condition code for this forecast. You could use this code to choose\r\na text description or image for the forecast.  \r\nThe possible values for this element are described in [Condition Codes][3]. (int)\r\n\r\n- `getTemperature()`  \r\nReturns the current temperature. (float)\r\n\r\n- `getDate()`  \r\nReturns the current date and time for which this forecast applies. (\\DateTime)\r\n\r\n### The Data\\Forecast object\r\n\r\nThe `Data\\Forecast` object represents the weather forecast for a specific day.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getDate()`  \r\nReturns the date to which this forecast applies. (\\DateTime)\r\n\r\n- `getLow()`  \r\nReturns the forecasted low temperature for this day. (float)\r\n\r\n- `getHigh()`  \r\nReturns the forecasted high temperature for this day. (float)\r\n\r\n- `getText()`  \r\nReturns the textual description of conditions. (string)\r\n\r\n- `getCode()`  \r\nReturns the condition code for this forecast. You could use this code to choose\r\na text description or image for the forecast.  \r\nThe possible values for this element are described in [Condition Codes][3]. (int)\r\n\r\nAttribution Guidelines\r\n----------------------\r\n\r\nPlease note that you are required to link back to Yahoo using the link URL\r\nprovided by `Feed::getLink()` and one of the logos Yahoo provides. Please refer\r\nto Yahoo's [Attribution Guidelines for Yahoo APIs][4] for details.\r\n\r\nLicense\r\n-------\r\n\r\nSee LICENSE.txt for full license details.\r\n\r\n\r\n[0]: https://travis-ci.org/randomhost/weather.svg?branch=master\r\n[1]: https://travis-ci.org/randomhost/weather\r\n[2]: http://developer.yahoo.com/weather/\r\n[3]: https://developer.yahoo.com/weather/documentation.html#codes\r\n[4]: https://developer.yahoo.com/attribution/\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}