{"name":"PHP_Weather","tagline":"Encapsulates SimpleXML functions for easy retrieval of weather data from the Yahoo Weather API.","body":"Introduction\r\n------------------------\r\n\r\nThis package encapsulates SimpleXML functions for easy retrieval of weather data\r\nfrom the [Yahoo Weather API](http://developer.yahoo.com/weather/). It\r\nwas created as part of the PHP_Webcam_Overlay package but is released as a\r\nseparate component so it can be used in other packages.\r\n\r\nBecause it was created as a dependency of the PHP_Webcam_Overlay package, it\r\ndoes only support a subset of the available weather data.\r\n\r\nSystem-Wide Installation\r\n------------------------\r\n\r\nPHP_Weather should be installed using the [PEAR Installer](http://pear.php.net).\r\nThis installer is the PHP community's de-facto standard for installing PHP\r\ncomponents.\r\n\r\n    sudo pear channel-discover pear.random-host.com\r\n    sudo pear install --alldeps randomhost/PHP_Weather\r\n\r\nUsage\r\n-----\r\n\r\nA basic approach at using this package could look like this:\r\n\r\n```php\r\n<?php\r\nnamespace randomhost\\Weather;\r\n\r\nrequire 'psr0.autoloader.php';\r\n\r\n// get Yahoo Weather API Feed instance\r\n$feed = new Yahoo\\Feed(667931, Yahoo\\Feed::UNITS_INTL);\r\n\r\necho sprintf(\r\n    'Temperature: %sÂ°%s, Humidity: %s%%',\r\n    $feed->getCondition()->getTemperature(),\r\n    $feed->getUnits()->getTemperature(),\r\n    $feed->getAtmosphere()->getHumidity()\r\n);\r\n```\r\n\r\nThis will instantiate the class, fetch the weather data and display current\r\ntemperature and humidity.\r\n\r\nAssuming that you named this file `weather.php`, you should now be able to\r\naccess the weather data at `http://example.com/weather.php`\r\n\r\nA more detailed example can be found in `src/www/weather/index.php` which will\r\nalso be installed to your PEAR www directory (usually `/usr/share/php/htdocs`).\r\n\r\n### The Feed object\r\n\r\nThe `Feed` object is the primary object you will interact with in your application.\r\nIt provides all methods required for retrieving data from the Yahoo! Weather API.\r\n\r\n#### Constructor\r\n\r\nThe constructor takes 3 parameters which are all optional:\r\n\r\n- `$locationId`  \r\nLocation ID (WOEID) for retrieving weather data from the Yahoo Weather API.\r\n\r\n- `$systemOfUnits`  \r\nSystem of units to be returned by the feed. This must be either `Feed::UNITS_INTL`\r\nor `Feed::UNITS_US`.\r\n\r\n- `$feedUrl`  \r\nFeed URL for retrieving weather data from Yahoo Weather API.\r\n\r\nIf a `$locationId` is given, `Feed::fetchData()` will be called implicitly which\r\nwill automatically retrieve weather data for the given location ID and populate\r\nthe data access objects accordingly.  \r\nIf you do not want this, you can omit `$locationId` or set it to `0` and configure\r\nthe location ID yourself using `Feed::setLocationId()`.\r\n\r\nThe `$systemOfUnits` parameter can be used to determine the system of units to\r\nbe used by the weather feed. If not given or set to `''` (an empty string), it\r\ndefaults to using international units (Celsius, kilometers, millibars).\r\n\r\n`$feedUrl` defines the feed URL for retrieving weather data from the Yahoo!\r\nWeather API. This parameter does not usually need to be changed unless Yahoo!\r\nchanges their API.\r\n\r\n#### Configuring the feed\r\n\r\nThe following public methods for configuring the weather feed are available:\r\n\r\n- `setFeedUrl($feedUrl)`  \r\nSets the feed URL for retrieving weather data from the Yahoo! Weather API.\r\n\r\n- `getFeedUrl()`  \r\nReturns the last set weather API feed URL.\r\n\r\n- `setLocationId($id)`  \r\nSets the location ID (WOEID) for retrieving weather data from Yahoo Weather API.\r\n\r\n- `getLocationId()`  \r\nReturns the last set location ID for retrieving weather data.\r\n\r\n- `setSystemOfUnits($systemOfUnits)`  \r\nSets the system of units to be returned by the feed.\r\n\r\n- `getSystemOfUnits()`  \r\nReturns the last set system of units.\r\n\r\n#### Retrieving data from the feed\r\n\r\nThe following public methods for retrieving data from the feed are available:\r\n\r\n- `fetchData()`  \r\nFetches weather data from the Yahoo Weather API and populates the data access\r\nobjects accordingly.  \r\nThis method must be called at least once before using any\r\nof the methods listed below.\r\n\r\n- `getLocation()`  \r\nReturns a `Data\\Location` object holding the location of this forecast.\r\n\r\n- `getUnits()`  \r\nReturns a `Data\\Units` object holding units for various aspects of the forecast.\r\n\r\n- `getWind()`  \r\nReturns a `Data\\Wind` object holding forecast information about wind.\r\n\r\n- `getAtmosphere()`  \r\nReturns a `Data\\Atmosphere` object holding forecast information about current\r\natmospheric pressure, humidity, and visibility.\r\n\r\n- `getAstronomy()`  \r\nReturns a `Data\\Astronomy` object holding forecast information about current\r\nastronomical conditions.\r\n\r\n- `getCondition()`  \r\nReturns a `Data\\Condition` object holding the current weather conditions.\r\n\r\n- `getForecast()`  \r\nReturns an array of `Data\\Forecast` objects holding the weather forecast for a\r\nspecific day.\r\n\r\n### The Data\\Location object\r\n\r\nThe `Data\\Location` object represents location information of the forecast.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getCity()`  \r\nReturns the city name. (string)\r\n\r\n- `getRegion()`  \r\nReturns the state, territory, or region. (string)\r\n\r\n- `getCountry()`  \r\nReturns the country name. (string)\r\n\r\n### The Data\\Units object\r\n\r\nThe `Data\\Units` object represents units for various aspects of the forecast.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getTemperature()`  \r\nReturns the degree units for temperature. (string)\r\n\r\n- `getDistance()`  \r\nReturns the units for distance. (string)\r\n\r\n- `getPressure()`  \r\nReturns the units of barometric pressure. (string)\r\n\r\n- `getSpeed()`  \r\nReturns the units of speed. (string)\r\n\r\n### The Data\\Wind object\r\n\r\nThe `Data\\Wind` object represents forecast information about wind.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getChill()`  \r\nReturns the wind chill in degrees. (float)\r\n\r\n- `getDirection()`  \r\nReturns the wind direction, in degrees. (float)\r\n\r\n- `getSpeed()`  \r\nReturns the wind speed. (float)\r\n\r\n### The Data\\Atmosphere object\r\n\r\nThe `Data\\Atmosphere` object represents forecast information about current\r\natmospheric pressure, humidity, and visibility.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getHumidity()`  \r\nReturns the humidity in percent. (float)\r\n\r\n- `getVisibility()`  \r\nReturns the visibility. (float)\r\n\r\n- `getPressure()`  \r\nReturns the barometric pressure. (float)\r\n\r\n- `getRising()`  \r\nReturns the state of the barometric pressure: steady (0), rising (1), or falling (2). (int)  \r\n\r\n### The Data\\Astronomy object\r\n\r\nThe `Data\\Astronomy` object represents forecast information about current\r\nastronomical conditions.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getSunrise()`  \r\nReturns today's sunrise time. (\\DateTime)\r\n\r\n- `getSunset()`  \r\nReturns today's sunset time. (\\DateTime)\r\n\r\n### The Data\\Condition object\r\n\r\nThe `Data\\Condition` object represents the current weather conditions.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getText()`  \r\nReturns the textual description of conditions. (string)\r\n\r\n- `getCode()`  \r\nReturns the condition code for this forecast. You could use this code to choose\r\na text description or image for the forecast.  \r\nThe possible values for this element are described in\r\n[Condition Codes](http://developer.yahoo.com/weather/#codes). (int)\r\n\r\n- `getTemperature()`  \r\nReturns the current temperature. (float)\r\n\r\n- `getDate()`  \r\nReturns the current date and time for which this forecast applies. (\\DateTime)\r\n\r\n### The Data\\Forecast object\r\n\r\nThe `Data\\Forecast` object represents the weather forecast for a specific day.\r\n\r\nThe following public methods for retrieving data are available:\r\n\r\n- `getDate()`  \r\nReturns the date to which this forecast applies. (\\DateTime)\r\n\r\n- `getLow()`  \r\nReturns the forecasted low temperature for this day. (float)\r\n\r\n- `getHigh()`  \r\nReturns the forecasted high temperature for this day. (float)\r\n\r\n- `getText()`  \r\nReturns the textual description of conditions. (string)\r\n\r\n- `getCode()`  \r\nReturns the condition code for this forecast. You could use this code to choose\r\na text description or image for the forecast.  \r\nThe possible values for this element are described in\r\n[Condition Codes](http://developer.yahoo.com/weather/#codes). (int)\r\n\r\nFinding your WOEID\r\n------------------\r\n\r\nTo find your WOEID, browse or search for your city from the [Yahoo! Weather home page]\r\n(http://weather.yahoo.com/). The WOEID is in the URL for the forecast page for\r\nthat city. You can also get the WOEID by entering your zip code on the home page.\r\n\r\nFor example, if you search for *Cologne* on the Weather home page, the forecast page\r\nfor that city is:\r\n\r\n    http://weather.yahoo.com/germany/north-rhine-westphalia/cologne-667931/\r\n\r\nThe WOEID is 667931.\r\n\r\nAs A Dependency On Your Component\r\n---------------------------------\r\n\r\nIf you are creating a component that relies on PHP_Weather, please make sure that\r\nyou add PHP_Weather to your component's package.xml file:\r\n\r\n```xml\r\n<dependencies>\r\n  <required>\r\n    <package>\r\n      <name>PHP_Weather</name>\r\n      <channel>pear.random-host.com</channel>\r\n      <min>1.0.0</min>\r\n      <max>1.999.9999</max>\r\n    </package>\r\n  </required>\r\n</dependencies>\r\n```\r\n\r\nDevelopment Environment\r\n-----------------------\r\n\r\nIf you want to patch or enhance this component, you will need to create a\r\nsuitable development environment. The easiest way to do that is to install\r\nphix4componentdev:\r\n\r\n    # phix4componentdev\r\n    sudo apt-get install php5-xdebug\r\n    sudo apt-get install php5-imagick\r\n    sudo pear channel-discover pear.phix-project.org\r\n    sudo pear -D auto_discover=1 install -Ba phix/phix4componentdev\r\n\r\nYou can then clone the git repository:\r\n\r\n    # PHP_Webcam_Overlay\r\n    git clone https://github.com/Random-Host/PHP_Weather.git\r\n\r\nThen, install a local copy of this component's dependencies to complete the\r\ndevelopment environment:\r\n\r\n    # build vendor/ folder\r\n    phing build-vendor\r\n\r\nTo make life easier for you, common tasks (such as running unit tests,\r\ngenerating code review analytics, and creating the PEAR package) have been\r\nautomated using [phing](http://phing.info).  You'll find the automated steps\r\ninside the build.xml file that ships with the component.\r\n\r\nRun the command 'phing' in the component's top-level folder to see the full list\r\nof available automated tasks.\r\n\r\nLicense\r\n-------\r\n\r\nSee LICENSE.txt for full license details.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}